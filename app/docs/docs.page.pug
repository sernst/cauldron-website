html
  head
    meta(name='viewport' content='width=device-width, initial-scale=1')
    title Cauldron Documentation
    link(rel='stylesheet' href='/external.css')
    link(rel='stylesheet' href='docs.css')
    include ../components/gitter/_gitter

  body
    div(id='app')
      section(id='bannerSection')
      div(style='flex:grow')
      script(src='docs.js')

      div(class='DocBody')
        h1 Programming Guide
        p.
          There are a few key concepts when programming Cauldron notebooks that
          differ from traditional notebooks. The first is the display. Anything
          that you want to appear in the notebook from text to graphs, must be
          added to the notebook display:

        pre.
          from cauldron import cd

          cd.display.text('Hello World!')

        p.
          You access the display from the imported cauldron library as shown in
          the code example above. The one exception is that Python's built-in print
          function will also add text to the display in a monospaced font that
          preserves whitespace just like printing to a console.
        p.
          The different display functions that can be used for displaying
          different types of content include:

        h2 Display Functions
        ul
          li(class="DisplayFunc").
            <em>bokeh:</em> Adds a Bokeh plot 
          model/figure
          ul(class="DisplayFunc__args")
            li <em>model:</em> The model to be added
            li.
              <em>scale:</em> How tall the plot should be in the notebook as a fraction
              of screen height. A number between 0.1 and 1.0.
            li.
              <em>responsive:</em> Whether or not the plot should responsively scale to
              fill the width of the notebook. The default it True.

          li(class="DisplayFunc")
            | <em>head:</em> Displays a specified number of elements in a source object of
            | many different possible types.
          ul(class="DisplayFunc__args")
            li.
              <em>source:</em> DataFrames will show count rows of that DataFrame. A list,
              tuple or other iterable, will show the first count rows.
              Dictionaries will show count keys from the dictionary, which will
              be randomly selected unless you are using an OrderedDict. Strings
              will show the first count characters.
            li <em>count:</em> The number of elements to show from the source.

          li(class="DisplayFunc").
            <em>header:</em> Adds a text header to the
            display with the specified level.
          ul(class="DisplayFunc__args")
            li <em>header_text:</em> The text to display in the header
            li.
              <em>level:</em> The level of the header, which corresponds to the html
              header levels, such as &lt;h1&gt;, &lt;h2&gt;, ...

          li(class="DisplayFunc").
            <em>html:</em> A string containing an HTML DOM snippet
          ul(class="DisplayFunc__args")
            li <em>dom:</em> The HTML string to add to the display

          li(class="DisplayFunc")
            | <em>inspect:</em> Inspects the data and structure of the source dictionary
            | object and adds the results to the display for viewing.
          ul(class="DisplayFunc__args")
            li <em>source:</em> The dictionary object to be inspected

          li(class="DisplayFunc")
            | <em>jinja:</em> Renders the specified jinja template to HTML and adds the
            | output to the display
          ul(class="DisplayFunc__args")
            li <em>path:</em> The fully-qualified path to the template to be rendered.
            li.
              <em>kwargs:</em> Any keyword arguments that will be use as variable
              replacements within the template

          li(class="DisplayFunc")
            | <em>json:</em> Adds the specified data to the the output display window with
            | the specified key. This allows the user to make available arbitrary
            | JSON-compatible data to the display for runtime use.
          ul(class="DisplayFunc__args")
            li.
              <em>kwargs:</em> Each keyword argument is added to the CD.data object with
              the specified key and value.

          li(class="DisplayFunc")
            | <em>latex:</em> Add a mathematical equation in latex math-mode syntax to the
            | display. Instead of the traditional backslash escape character, the
            | @ character is used instead to prevent backslash conflicts with
            | Python strings. For example, delta would be @delta.
          ul(class="DisplayFunc__args")
            li <em>source:</em> The string representing the latex equation to be rendered.

          li(class="DisplayFunc")
            | <em>listing:</em> An unordered or ordered bulleted list of the specified
            | source iterable where each element is converted to a string
            | representation for display.
          ul(class="DisplayFunc__args")
            li <em>source:</em> The iterable to display as a list
            li.
              <em>ordered:</em> Whether or not the list should be ordered. If False,
              which is the default, an unordered bulleted list is created.

          li(class="DisplayFunc")
            | <em>markdown:</em> Renders the source string using markdown and adds the
            | resulting HTML to the display
          ul(class="DisplayFunc__args")
            li <em>source:</em> A markdown formatted string.
            li.
              <em>kwargs:</em> Any variable replacements to make within the string using
              Jinja2 templating syntax.

          li(class="DisplayFunc")
            | <em>plotly:</em> Creates a Plotly plot in the display with the specified data
            | and layout
          ul(class="DisplayFunc__args")
            li.
              <em>data:</em> The Plotly trace data to be plotted. Or an iterable (list,
              tuple) of plotly traces to be plotted on the same plot.
            li <em>layout:</em> The layout data used for the plot
            li.
              <em>scale:</em> The display scale with units of fractional screen height. A
              value of 0.5 constrains the output to a maximum height equal to
              half the height of browser window when viewed. Values below 1.0
              are usually recommended so the entire output can be viewed without
              scrolling.

          li(class="DisplayFunc")
            | <em>pyplot:</em> Creates a matplotlib plot in the display for the specified
            | figure. The size of the plot is determined automatically to best fit
            | the notebook.
          ul(class="DisplayFunc__args")
            li.
              <em>figure:</em> The matplotlib figure to plot. If omitted, the currently
              active figure will be used.
            li.
              <em>scale:</em> The display scale with units of fractional screen height. A
              value of 0.5 constrains the output to a maximum height equal to
              half the height of browser window when viewed. Values below 1.0 are
              usually recommended so the entire output can be viewed without
              scrolling.
            li.
              <em>clear:</em> Clears the figure after it has been rendered. This is
              useful to prevent persisting old plot data between repeated runs
              of the project files. This can be disabled if the plot is going to
              be used later in the project files.
            li.
              <em>aspect_ratio:</em> The aspect ratio for the displayed plot as a
              two-element list or tuple. The first element is the width and the
              second element the height. The units are "inches," which is an
              important consideration for the display of text within the figure.
              If no aspect ratio is specified, the currently assigned values to
              the plot will be used instead.

          li(class="DisplayFunc")
            | <em>svg:</em> Adds the specified SVG string to the display. If a filename is
            | included, the SVG data will also be saved to that filename within
            | the project results folder.
          ul(class="DisplayFunc__args")
            li <em>svg:</em> The SVG string data to add to the display
            li.
              <em>filename:</em> An optional filename where the SVG data should be saved
              within the project results folder.

          li(class="DisplayFunc")
            | <em>table:</em> Adds the specified data frame to the display in a nicely
            | formatted scrolling table
          ul(class="DisplayFunc__args")
            li <em>data_frame:</em> The pandas data frame to be rendered to a table
            li.
              <em>scale:</em> The display scale with units of fractional screen height. A
              value of 0.5 constrains the output to a maximum height equal to
              half the height of browser window when viewed. Values below 1.0
              are usually recommended so the entire output can be viewed without
              scrolling.

          li(class="DisplayFunc")
            | <em>tail:</em> The opposite of the head function described above. Displays
            | the last count elements of the source object.
          ul(class="DisplayFunc__args")
            li.
              <em>source:</em> DataFrames will show the last count rows of that DataFrame.
              A list, tuple or other iterable, will show the last count rows.
              Dictionaries will show count keys from the dictionary, which will
              be randomly selected unless you are using an OrderedDict. Strings
              will show the last count characters.
            li <em>count:</em> The number of elements to show from the source.

          li(class="DisplayFunc")
            | <em>text:</em> Adds text to the display. If the text is not preformatted, it
            | will be displayed in paragraph format. Preformatted text will be
            | displayed inside a pre tag with a monospace font.
          ul(class="DisplayFunc__args")
            li <em>text:</em> The text to display
            li.
              <em>preformatted:</em> Whether or not to preserve the whitespace display
              the text

          li(class="DisplayFunc").
            <em>whitespace:</em> Adds a specified number of lines of
            whitespace.
          ul(class="DisplayFunc__args")
            li <em>lines:</em> The number of lines of whitespace to show.

        h2 Shared &amp; Local Variables

        p.
          Cauldron does not share all variables between cells. Instead all
          variables are local unless you explicitly share them using the cauldron
          shared object. Consider a step (cell) in a notebook with the following
          code:

        pre.
          import cauldron as cd

          x = 12

        p And then another step (cell) with the following code:

        pre.
          import cauldron as cd

          print(x)

        p.
          If you run these steps in order the second step will raise an exception
          because the x variable is not defined in that step. The proper way to
          share variables between steps is to add them to the cauldron shared
          object like this:

        pre.
          import cauldron as cd

          cd.shared.x = 12

        p And then another step (cell) with the following code:

        pre
          import cauldron as cd

          print(cd.shared.x)

        p.
          In this case the second step will correctly print a value of 12 in the
          second step.

        h2 Running in Production
        p.
          Cauldron is designed to make it easy to run a notebook in a production
          environment from within Python or directly from a command line.
        p.
          When called from within Python the execution would look like this:

        pre.
          project_directory = '/directory/of/my/cauldron/notebook/project'
          output_directory = '/save/my/results/in/this/directory'
          logging_path = '/log/data/to/this/filename.log'

          cauldron.run_project(project_directory, output_directory, logging_path)

        p.
          This will open, run and then close the specified project. The HTML will
          be exported to the output directory. The data normally printed to the
          console will be saved to the specified logging_path file.
        p.
          The exact same command can be run from the command line using the
          cauldron command and supplying the necessary arguments:

        pre.
          $ cauldron --project='/directory/of/my/cauldron/notebook/project' \
          --output='/save/my/results/in/this/directory' \
          --log='/log/data/to/this/filename.log'

        p.
          This does exactly the same thing as the python script shown above, but
          can be called directly from a terminal or added to a shell script.

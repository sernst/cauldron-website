{
  "name": "table",
  "doc": "Adds the specified data frame to the display in a nicely formatted\nscrolling table.",
  "params": [
    {
      "name": "data_frame",
      "index": 0,
      "description": "\nThe pandas data frame to be rendered to a table.",
      "type": "Any",
      "optional": false
    },
    {
      "name": "scale",
      "index": 1,
      "description": "\nThe display scale with units of fractional screen height. A value\nof 0.5 constrains the output to a maximum height equal to half the\nheight of browser window when viewed. Values below 1.0 are usually\nrecommended so the entire output can be viewed without scrolling.",
      "type": "float",
      "optional": true,
      "default": "0.7"
    },
    {
      "name": "include_index",
      "index": 2,
      "description": "\nWhether or not the index column should be included in the displayed\noutput. The index column is not included by default because it is\noften unnecessary extra information in the display of the data.",
      "type": "bool",
      "optional": true,
      "default": "False"
    },
    {
      "name": "max_rows",
      "index": 3,
      "description": "\nThis argument exists to prevent accidentally writing very large data\nframes to a table, which can cause the notebook display to become\nsluggish or unresponsive. If you want to display large tables, you need\nonly increase the value of this argument.",
      "type": "int",
      "optional": true,
      "default": "500"
    },
    {
      "name": "sample_rows",
      "index": 4,
      "description": "\nWhen set to a positive integer value, the DataFrame will be randomly\nsampled to the specified number of rows when displayed in the table.\nIf the value here is larger than the number of rows in the DataFrame,\nthe sampling will have no effect and the entire DataFrame will be\ndisplayed instead.",
      "type": "int, NoneType",
      "optional": true,
      "default": "None"
    },
    {
      "name": "formats",
      "index": 5,
      "description": "\nAn optional dictionary that, when specified, should contain a mapping\nbetween column names and formatting strings to apply to that column\nfor display purposes. For example, ``{'foo': '{:,.2f}%'}`` would\ntransform a column ``foo = [12.2121, 34.987123, 42.72839]`` to\ndisplay as ``foo = [12.21%, 34.99%, 42.73%]``. The formatters should\nfollow the standard Python string formatting guidelines the same as\nthe ``str.format()`` command having the value of the column as the only\npositional argument in the format arguments. A string value can also\nbe specified for uniform formatting of all columns (or if displaying\na series with only a single value).",
      "type": "str, typing.Any, str, str, str, typing.Any, str",
      "optional": true,
      "default": "None"
    }
  ],
  "returns": {
    "type": null,
    "description": ""
  }
}